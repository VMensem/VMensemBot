import logging
from typing import Optional

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è audioop (—á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª Discord –Ω–∞ Linux/Render)
try:
    import audioop
except ModuleNotFoundError:
    import types
    audioop = types.SimpleNamespace()
    audioop.add = lambda *a, **k: None
    audioop.mul = lambda *a, **k: None
    audioop.max = lambda *a, **k: 0

import discord
from discord import app_commands
from discord.ext import commands

from unified_config import DISCORD_TOKEN
from arizona_api import arizona_api

logger = logging.getLogger(__name__)

class DiscordBot:
    """Discord bot with Arizona RP statistics and basic commands (slash)"""
    
    def __init__(self):
        self.bot: Optional[discord.Bot] = None
        self.is_ready = False
        
    def setup(self):
        """Setup Discord bot"""
        if not DISCORD_TOKEN:
            logger.warning("Discord token not provided, Discord bot will not start")
            return False
            
        try:
            intents = discord.Intents.default()
            intents.guilds = True

            # –°–æ–∑–¥–∞—ë–º bot –∫–∞–∫ discord.Bot –¥–ª—è slash –∫–æ–º–∞–Ω–¥
            self.bot = discord.Bot(intents=intents)
            
            self.setup_events()
            self.setup_commands()
            
            logger.info("Discord bot configured successfully")
            return True
            
        except Exception as e:
            logger.error(f"Failed to setup Discord bot: {e}")
            return False
    
    def setup_events(self):
        @self.bot.event
        async def on_ready():
            self.is_ready = True
            logger.info(f"Discord –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {self.bot.user}")
            print(f"ü§ñ Discord –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {self.bot.user}")
            activity = discord.Game(name="/stats <–Ω–∏–∫> <—Å–µ—Ä–≤–µ—Ä> | /help")
            await self.bot.change_presence(activity=activity)

    def setup_commands(self):
        """Setup slash commands"""
        
        @self.bot.slash_command(name="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
        async def help(ctx: discord.ApplicationContext):
            embed = discord.Embed(
                title="ü§ñ MensemBot - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º",
                color=0x00ff00,
                description="–ú–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è Discord –∏ Telegram"
            )
            embed.add_field(
                name="üéÆ Arizona RP –∫–æ–º–∞–Ω–¥—ã",
                value="`/stats <–Ω–∏–∫> <ID —Å–µ—Ä–≤–µ—Ä–∞>` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞\n"
                      "`/servers` - –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã Arizona RP",
                inline=False
            )
            embed.add_field(
                name="‚ÑπÔ∏è –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã",
                value="`/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
                      "`/about` - –û –±–æ—Ç–µ",
                inline=False
            )
            embed.add_field(
                name="üìù –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
                value="`/stats PlayerName 1`\n`/stats Vlad_Mensem 5`",
                inline=False
            )
            embed.set_footer(text="–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã: –ü–ö 1-31, –ú–æ–±–∞–π–ª 101-103")
            await ctx.respond(embed=embed)

        @self.bot.slash_command(name="about", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
        async def about(ctx: discord.ApplicationContext):
            embed = discord.Embed(
                title="ü§ñ MensemBot",
                color=0x0099ff,
                description="–ú–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ Arizona RP"
            )
            embed.add_field(
                name="üîß –§—É–Ω–∫—Ü–∏–∏",
                value="‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ Arizona RP\n"
                      "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º\n"
                      "‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è —á–∞—Ç–∞\n"
                      "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Discord –∏ Telegram",
                inline=False
            )
            embed.add_field(name="üëë –°–æ–∑–¥–∞—Ç–µ–ª—å", value="@vladlotto", inline=True)
            embed.add_field(name="üì± Telegram", value="@mensembot", inline=True)
            embed.set_footer(text="–í–µ—Ä—Å–∏—è 2.0 ‚Ä¢ Discord + Telegram")
            await ctx.respond(embed=embed)

        @self.bot.slash_command(name="stats", description="–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ Arizona RP")
        async def stats(ctx: discord.ApplicationContext, nickname: str, server_id: int):
            await ctx.defer()
            
            # Validate nickname
            valid_nick, nick_err = arizona_api.validate_nickname(nickname)
            if not valid_nick:
                await ctx.respond(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∏–∫–∞", description=nick_err, color=0xff0000))
                return

            # Validate server
            valid_srv, srv_err = arizona_api.validate_server_id(server_id)
            if not valid_srv:
                await ctx.respond(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞", description=srv_err, color=0xff0000))
                return

            data, err = await arizona_api.fetch_player_stats(nickname, server_id)
            if err:
                await ctx.respond(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", description=err, color=0xff0000))
                return
            
            formatted = arizona_api.format_stats(data, nickname, server_id)
            if len(formatted) > 2000:
                import io
                f = io.StringIO(formatted)
                file = discord.File(fp=f, filename=f"{nickname}_stats.txt")
                await ctx.respond(embed=discord.Embed(title=f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {nickname}", description="–§–∞–π–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω", color=0x00ff00), file=file)
            else:
                await ctx.respond(embed=discord.Embed(title=f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {nickname}", description=formatted, color=0x00ff00))

        @self.bot.slash_command(name="servers", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã Arizona RP")
        async def servers(ctx: discord.ApplicationContext):
            await ctx.defer()
            
            class RefreshView(discord.ui.View):
                def __init__(self):
                    super().__init__(timeout=300)
                
                @discord.ui.button(label="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", style=discord.ButtonStyle.primary)
                async def refresh(self, interaction: discord.Interaction, button: discord.ui.Button):
                    await interaction.response.defer()
                    try:
                        info = await arizona_api.get_servers_status_from_api()
                        embed = discord.Embed(title="üåê Arizona RP Servers", description=info, color=0x00ff00)
                        embed.set_footer(text="–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é")
                        await interaction.edit_original_response(embed=embed, view=RefreshView())
                    except Exception as e:
                        logger.error(f"Error refreshing servers: {e}")
                        fallback = arizona_api.get_servers_info()
                        embed = discord.Embed(title="‚ö†Ô∏è –û—à–∏–±–∫–∞", description=fallback, color=0xff6600)
                        await interaction.edit_original_response(embed=embed, view=RefreshView())

            try:
                info = await arizona_api.get_servers_status_from_api()
                embed = discord.Embed(title="üåê Arizona RP Servers", description=info, color=0x00ff00)
                embed.set_footer(text="–û–±–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                await ctx.respond(embed=embed, view=RefreshView())
            except Exception as e:
                logger.error(f"Error fetching servers: {e}")
                fallback = arizona_api.get_servers_info()
                embed = discord.Embed(title="‚ö†Ô∏è –û—à–∏–±–∫–∞", description=fallback, color=0xff6600)
                await ctx.respond(embed=embed, view=RefreshView())

    async def start(self):
        if not self.bot:
            logger.warning("Discord bot not configured")
            return
        try:
            await self.bot.start(DISCORD_TOKEN)
        except Exception as e:
            logger.error(f"Discord bot error: {e}")
            raise

    async def close(self):
        if self.bot:
            await self.bot.close()
            logger.info("Discord bot closed")

discord_bot = DiscordBot()