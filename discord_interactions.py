"""
Discord Interactions Handler
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Discord Interactions —á–µ—Ä–µ–∑ HTTP webhook –≤–º–µ—Å—Ç–æ WebSocket
"""

import os
import json
import logging
import hashlib
import hmac
import asyncio
import aiohttp
from flask import Flask, request, jsonify
from typing import Dict, Any, Optional
from data_manager import DataManager
from unified_config import API_KEY

# –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ArizonaAPI, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
try:
    from arizona_api import ArizonaAPI
except ImportError:
    ArizonaAPI = type(None)  # –°–æ–∑–¥–∞–µ–º —Ç–∏–ø –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

logger = logging.getLogger(__name__)

class DiscordInteractionsHandler:
    def __init__(self, data_manager: DataManager, arizona_api: Optional[Any] = None):
        self.data_manager = data_manager
        self.arizona_api = arizona_api
        self.application_id = os.getenv('DISCORD_APPLICATION_ID')
        self.public_key = os.getenv('DISCORD_PUBLIC_KEY')
        self.bot_token = os.getenv('DISCORD_TOKEN')
        
    def verify_signature(self, signature: str, timestamp: str, body: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ Discord"""
        if not self.public_key:
            return False
            
        try:
            public_key_bytes = bytes.fromhex(self.public_key)
            message = timestamp + body
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Ed25519 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
            # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ nacl
            return signature.startswith('ed25519=')
        except Exception as e:
            logger.error(f"Error verifying signature: {e}")
            return False
    
    async def handle_interaction(self, interaction_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ Discord interaction"""
        interaction_type = interaction_data.get('type')
        
        # Ping (type 1)
        if interaction_type == 1:
            return {'type': 1}  # Pong response
        
        # Application Command (type 2)
        elif interaction_type == 2:
            return await self.handle_command(interaction_data)
        
        # Message Component (type 3)
        elif interaction_type == 3:
            return await self.handle_component(interaction_data)
        
        return {'type': 4, 'data': {'content': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è'}}
    
    async def handle_command(self, interaction: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ Discord"""
        command_name = interaction['data']['name']
        
        try:
            if command_name == 'help':
                return await self.cmd_help()
            elif command_name == 'rules':
                return await self.cmd_rules()
            elif command_name == 'info':
                return await self.cmd_info()
            elif command_name == 'rank':
                return await self.cmd_rank()
            elif command_name == 'servers':
                return await self.cmd_servers()
            elif command_name == 'stats':
                return await self.cmd_stats(interaction['data'].get('options', []))
            else:
                return self.error_response(f"–ö–æ–º–∞–Ω–¥–∞ {command_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except Exception as e:
            logger.error(f"Command error: {e}")
            return self.error_response("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")
    
    async def handle_component(self, interaction: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (–∫–Ω–æ–ø–∫–∏, –º–µ–Ω—é)"""
        custom_id = interaction['data']['custom_id']
        
        if custom_id == 'refresh_stats':
            # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            return {'type': 7, 'data': {'content': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!'}}
        
        return self.error_response("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ")
    
    async def cmd_help(self) -> Dict[str, Any]:
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
        embed = {
            'title': 'üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ MensemBot',
            'description': '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Discord',
            'color': 0x00ff00,
            'fields': [
                {
                    'name': 'üìù –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã',
                    'value': '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n/rules - –ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞\n/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n/rank - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–Ω–≥–∞—Ö',
                    'inline': False
                },
                {
                    'name': 'üéÆ Arizona RP',
                    'value': '/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞\n/servers - –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤',
                    'inline': False
                }
            ]
        }
        
        return {'type': 4, 'data': {'embeds': [embed]}}
    
    async def cmd_rules(self) -> Dict[str, Any]:
        """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∞–≤–∏–ª"""
        rules = self.data_manager.get_rules()
        embed = {
            'title': 'üìã –ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            'description': rules,
            'color': 0x0099ff
        }
        return {'type': 4, 'data': {'embeds': [embed]}}
    
    async def cmd_info(self) -> Dict[str, Any]:
        """–ö–æ–º–∞–Ω–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        info = self.data_manager.get_info()
        embed = {
            'title': '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
            'description': info,
            'color': 0x00ff99
        }
        return {'type': 4, 'data': {'embeds': [embed]}}
    
    async def cmd_rank(self) -> Dict[str, Any]:
        """–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–Ω–≥–æ–≤"""
        rank_info = self.data_manager.get_rank()
        embed = {
            'title': 'üèÜ –†–∞–Ω–≥–∏',
            'description': rank_info,
            'color': 0xffd700
        }
        return {'type': 4, 'data': {'embeds': [embed]}}
    
    async def cmd_servers(self) -> Dict[str, Any]:
        """–ö–æ–º–∞–Ω–¥–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ Arizona RP"""
        if not self.arizona_api:
            return self.error_response("Arizona RP API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        servers_info = """
**üíª –ü–ö —Å–µ—Ä–≤–µ—Ä—ã (1-31):**
 1: Phoenix
 2: Tucson
 3: Scottdale
 4: Chandler
 5: Brainburg
 6: Saint Rose
 7: Mesa
 8: Red Rock
 9: Yuma
10: Surprise
11: Prescott
12: Glendale
13: Kingman
14: Winslow
15: Payson
16: Gilbert
17: Show Low
18: Casa Grande
19: Page
20: Sun City
21: Queen Creek
22: Sedona
23: Holiday
24: Wednesday
25: Yava
26: Faraway
27: Bumble Bee
28: Christmas
29: Mirage
30: Love
31: Drake

**üì± –ú–æ–±–∞–π–ª —Å–µ—Ä–≤–µ—Ä—ã:**
101: Mobile 1
102: Mobile 2
103: Mobile 3
"""
        
        embed = {
            'title': 'üåê –°–µ—Ä–≤–µ—Ä—ã Arizona RP:',
            'description': servers_info,
            'color': 0xff6600,
            'footer': {'text': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats <–Ω–∏–∫> <ID —Å–µ—Ä–≤–µ—Ä–∞> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'}
        }
        
        return {'type': 4, 'data': {'embeds': [embed]}}
    
    async def cmd_stats(self, options: list) -> Dict[str, Any]:
        """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞"""
        if not self.arizona_api:
            return self.error_response("Arizona RP API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        if len(options) < 2:
            return self.error_response("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /stats <–Ω–∏–∫> <ID —Å–µ—Ä–≤–µ—Ä–∞>")
        
        nickname = options[0]['value']
        server_id = options[1]['value']
        
        try:
            stats = await self.arizona_api.get_player_stats(nickname, server_id)
            
            if not stats:
                return self.error_response(f"–ò–≥—Ä–æ–∫ {nickname} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server_id}")
            
            embed = {
                'title': f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ {nickname}',
                'color': 0x00ff00,
                'fields': [
                    {'name': 'üÜî ID', 'value': str(stats.get('id', 'N/A')), 'inline': True},
                    {'name': 'üåç –°–µ—Ä–≤–µ—Ä', 'value': str(server_id), 'inline': True},
                    {'name': 'üí∞ –î–µ–Ω—å–≥–∏', 'value': f"${stats.get('money', 0):,}", 'inline': True},
                    {'name': 'üè¶ –ë–∞–Ω–∫', 'value': f"${stats.get('bank', 0):,}", 'inline': True},
                    {'name': '‚≠ê –£—Ä–æ–≤–µ–Ω—å', 'value': str(stats.get('level', 0)), 'inline': True},
                    {'name': 'üïê –û–Ω–ª–∞–π–Ω', 'value': f"{stats.get('online_hours', 0)} —á.", 'inline': True}
                ]
            }
            
            return {'type': 4, 'data': {'embeds': [embed]}}
            
        except Exception as e:
            logger.error(f"Stats command error: {e}")
            return self.error_response("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞")
    
    def error_response(self, message: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π"""
        embed = {
            'title': '‚ùå –û—à–∏–±–∫–∞',
            'description': message,
            'color': 0xff0000
        }
        return {'type': 4, 'data': {'embeds': [embed]}}

def create_discord_webhook_handler(app: Flask, data_manager: DataManager):
    """–°–æ–∑–¥–∞–Ω–∏–µ webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è Discord"""
    arizona_api = ArizonaAPI(API_KEY) if API_KEY and ArizonaAPI else None
    handler = DiscordInteractionsHandler(data_manager, arizona_api)
    
    @app.route('/discord/interactions', methods=['POST'])
    def discord_interactions():
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        signature = request.headers.get('X-Signature-Ed25519')
        timestamp = request.headers.get('X-Signature-Timestamp')
        
        if not signature or not timestamp:
            return jsonify({'error': 'Missing signature headers'}), 401
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        body = request.get_data(as_text=True)
        
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            interaction_data = request.json
            if not interaction_data:
                return jsonify({'error': 'Invalid JSON data'}), 400
            
            response = asyncio.run(handler.handle_interaction(interaction_data))
            return jsonify(response)
        except Exception as e:
            logger.error(f"Discord interaction error: {e}")
            return jsonify({'error': 'Internal server error'}), 500
    
    return handler

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è slash –∫–æ–º–∞–Ω–¥ Discord (–Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑)
async def register_discord_commands():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è slash –∫–æ–º–∞–Ω–¥ –≤ Discord"""
    application_id = os.getenv('DISCORD_APPLICATION_ID')
    bot_token = os.getenv('DISCORD_TOKEN')
    
    if not application_id or not bot_token:
        logger.warning("Discord Application ID –∏–ª–∏ Bot Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return
    
    commands = [
        {
            'name': 'help',
            'description': '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥',
            'type': 1
        },
        {
            'name': 'rules',
            'description': '–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            'type': 1
        },
        {
            'name': 'info',
            'description': '–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
            'type': 1
        },
        {
            'name': 'rank',
            'description': '–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–Ω–≥–∞—Ö',
            'type': 1
        },
        {
            'name': 'servers',
            'description': '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ Arizona RP',
            'type': 1
        },
        {
            'name': 'stats',
            'description': '–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ Arizona RP',
            'type': 1,
            'options': [
                {
                    'name': 'nickname',
                    'description': '–ù–∏–∫ –∏–≥—Ä–æ–∫–∞',
                    'type': 3,
                    'required': True
                },
                {
                    'name': 'server',
                    'description': 'ID —Å–µ—Ä–≤–µ—Ä–∞ (1-28)',
                    'type': 4,
                    'required': True,
                    'min_value': 1,
                    'max_value': 28
                }
            ]
        }
    ]
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ Discord API
    url = f'https://discord.com/api/v10/applications/{application_id}/commands'
    headers = {
        'Authorization': f'Bot {bot_token}',
        'Content-Type': 'application/json'
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.put(url, json=commands, headers=headers) as response:
            if response.status == 200:
                logger.info("Discord slash –∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Discord –∫–æ–º–∞–Ω–¥: {response.status}")