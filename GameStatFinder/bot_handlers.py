import logging
from typing import Union

import discord
from discord.ext import commands
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message

from api_client import api_client
from utils import validate_nickname, validate_server_id, truncate_message, escape_markdown

logger = logging.getLogger(__name__)

class DiscordBotHandlers:
    """Discord bot command handlers"""
    
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.setup_events()
        self.setup_commands()
    
    def setup_events(self):
        """Setup Discord bot events"""
        
        @self.bot.event
        async def on_ready():
            logger.info(f"Discord –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {self.bot.user}")
            print(f"ü§ñ Discord –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {self.bot.user}")
            
            # Set bot status
            activity = discord.Game(name="!stats <–Ω–∏–∫> <—Å–µ—Ä–≤–µ—Ä>")
            await self.bot.change_presence(activity=activity)
        
        @self.bot.event
        async def on_command_error(ctx: commands.Context, error: Exception):
            """Handle command errors"""
            logger.error(f"Discord command error: {error}")
            
            if isinstance(error, commands.CommandNotFound):
                await ctx.send("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `!stats <–Ω–∏–∫> <ID —Å–µ—Ä–≤–µ—Ä–∞>`")
            elif isinstance(error, commands.MissingRequiredArgument):
                await ctx.send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `!stats <–Ω–∏–∫> <ID —Å–µ—Ä–≤–µ—Ä–∞>`")
            elif isinstance(error, commands.BadArgument):
                await ctx.send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã. ID —Å–µ—Ä–≤–µ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            else:
                await ctx.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")
    
    def setup_commands(self):
        """Setup Discord bot commands"""
        
        @self.bot.command(name="stats", help="–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞")
        async def discord_stats(ctx: commands.Context, nickname: str = "", server_id: int = 0):
            """Discord stats command handler"""
            
            # Show typing indicator
            async with ctx.typing():
                # Validate arguments
                if not nickname or server_id == 0:
                    await ctx.send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `!stats <–Ω–∏–∫> <ID —Å–µ—Ä–≤–µ—Ä–∞>`\n\n**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:** –ü–ö 1-31, –ú–æ–±–∞–π–ª 101-103\n**–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã:** `!servers`")
                    return
                
                # Validate nickname
                is_valid_nick, nick_error = validate_nickname(nickname)
                if not is_valid_nick:
                    await ctx.send(f"‚ùå {nick_error}")
                    return
                
                # Validate server ID
                is_valid_server, server_error = validate_server_id(server_id)
                if not is_valid_server:
                    await ctx.send(f"‚ùå {server_error}")
                    return
                
                # Fetch statistics
                data, error = await api_client.fetch_player_stats(nickname, server_id)
                
                if error:
                    await ctx.send(error)
                    return
                
                # Format and send response
                if data is not None:
                    formatted_stats = api_client.format_stats(data, nickname, server_id)
                else:
                    formatted_stats = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
                
                # Truncate message if too long for Discord
                formatted_stats = truncate_message(formatted_stats, 2000)
                
                await ctx.send(formatted_stats)
        
        @self.bot.command(name="servers", help="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã Arizona RP")
        async def discord_servers(ctx: commands.Context):
            """Discord servers command"""
            server_msg = "üåê **–°–µ—Ä–≤–µ—Ä—ã Arizona RP:**\n\n"
            
            # –ü–ö —Å–µ—Ä–≤–µ—Ä—ã
            server_msg += "üíª **–ü–ö —Å–µ—Ä–≤–µ—Ä—ã (1-31):**\n"
            pc_servers = ", ".join([str(i) for i in range(1, 32)])
            server_msg += f"{pc_servers}\n\n"
            
            # –ú–æ–±–∞–π–ª —Å–µ—Ä–≤–µ—Ä—ã
            server_msg += "üì± **–ú–æ–±–∞–π–ª —Å–µ—Ä–≤–µ—Ä—ã:**\n"
            server_msg += "101, 102, 103\n"
            
            server_msg += "\n**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `!stats <–Ω–∏–∫> <ID —Å–µ—Ä–≤–µ—Ä–∞>`"
            server_msg += "\n**–ü—Ä–∏–º–µ—Ä:** `!stats PlayerName 1`"
            
            await ctx.send(server_msg)

        @self.bot.command(name="help", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
        async def discord_help(ctx: commands.Context):
            """Discord help command"""
            help_text = """
ü§ñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞ Arizona RP**

**!stats <–Ω–∏–∫> <ID —Å–µ—Ä–≤–µ—Ä–∞>** - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ
**!servers** - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã Arizona RP

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã Arizona RP:** –ü–ö 1-31, –ú–æ–±–∞–π–ª 101-103

**–ü—Ä–∏–º–µ—Ä:** `!stats PlayerName 1`
            """
            await ctx.send(help_text)

class TelegramBotHandlers:
    """Telegram bot command handlers"""
    
    def __init__(self):
        self.dp = Dispatcher()
        self.setup_handlers()
    
    def setup_handlers(self):
        """Setup Telegram bot handlers"""
        
        @self.dp.message(Command("start"))
        async def tg_start(message: Message):
            """Telegram start command handler"""
            welcome_text = """
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Arizona RP!**

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/stats <–Ω–∏–∫> <ID —Å–µ—Ä–≤–µ—Ä–∞>` - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
‚Ä¢ `/servers` - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã Arizona RP

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã Arizona RP:** –ü–ö 1-31, –ú–æ–±–∞–π–ª 101-103

**–ü—Ä–∏–º–µ—Ä:** `/stats PlayerName 1`

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help
            """
            await message.answer(welcome_text, parse_mode="Markdown")
        
        @self.dp.message(Command("servers"))
        async def tg_servers(message: Message):
            """Telegram servers command handler"""
            server_msg = "üåê **–°–µ—Ä–≤–µ—Ä—ã Arizona RP:**\n\n"
            
            # –ü–ö —Å–µ—Ä–≤–µ—Ä—ã
            server_msg += "üíª **–ü–ö —Å–µ—Ä–≤–µ—Ä—ã (1-31):**\n"
            pc_servers = ", ".join([str(i) for i in range(1, 32)])
            server_msg += f"{pc_servers}\n\n"
            
            # –ú–æ–±–∞–π–ª —Å–µ—Ä–≤–µ—Ä—ã
            server_msg += "üì± **–ú–æ–±–∞–π–ª —Å–µ—Ä–≤–µ—Ä—ã:**\n"
            server_msg += "101, 102, 103\n"
            
            server_msg += "\n**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/stats <–Ω–∏–∫> <ID —Å–µ—Ä–≤–µ—Ä–∞>`"
            server_msg += "\n**–ü—Ä–∏–º–µ—Ä:** `/stats PlayerName 1`"
            
            await message.answer(server_msg, parse_mode="Markdown")
        
        @self.dp.message(Command("help"))
        async def tg_help(message: Message):
            """Telegram help command handler"""
            help_text = """
ü§ñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞ Arizona RP**

**/stats <–Ω–∏–∫> <ID —Å–µ—Ä–≤–µ—Ä–∞>** - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ
**/servers** - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã Arizona RP
**/help** - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
**/start** - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã Arizona RP:** –ü–ö 1-31, –ú–æ–±–∞–π–ª 101-103

**–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
`/stats PlayerName 1`

**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚Ä¢ –ù–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3-24 —Å–∏–º–≤–æ–ª–∞
‚Ä¢ –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è
            """
            await message.answer(help_text, parse_mode="Markdown")
        
        @self.dp.message(Command("stats"))
        async def tg_stats(message: Message):
            """Telegram stats command handler"""
            
            # Parse command arguments
            args = message.text.split() if message.text else []
            
            if len(args) != 3:
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
                    "**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/stats <–Ω–∏–∫> <ID —Å–µ—Ä–≤–µ—Ä–∞>`\n\n"
                    "**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:** –ü–ö 1-31, –ú–æ–±–∞–π–ª 101-103\n"
                    "**–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã:** `/servers`\n\n"
                    "**–ü—Ä–∏–º–µ—Ä:** `/stats PlayerName 1`",
                    parse_mode="Markdown"
                )
                return
            
            nickname = args[1]
            
            # Validate server ID
            try:
                server_id = int(args[2])
            except ValueError:
                await message.answer("‚ùå ID —Å–µ—Ä–≤–µ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
                return
            
            # Validate nickname
            is_valid_nick, nick_error = validate_nickname(nickname)
            if not is_valid_nick:
                await message.answer(f"‚ùå {nick_error}")
                return
            
            # Validate server ID
            is_valid_server, server_error = validate_server_id(server_id)
            if not is_valid_server:
                await message.answer(f"‚ùå {server_error}")
                return
            
            # Send "processing" message
            processing_msg = await message.answer("‚åõ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
            
            try:
                # Fetch statistics
                data, error = await api_client.fetch_player_stats(nickname, server_id)
                
                if error:
                    await processing_msg.edit_text(error)
                    return
                
                # Format response
                if data is not None:
                    formatted_stats = api_client.format_stats(data, nickname, server_id)
                else:
                    formatted_stats = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
                
                # Truncate message if too long for Telegram
                formatted_stats = truncate_message(formatted_stats, 4096)
                
                # Remove problematic markdown characters and try without parse_mode first
                safe_stats = formatted_stats.replace('‚îú‚îÄ', '  ').replace('‚îî‚îÄ', '  ').replace('*', '').replace('_', '')
                try:
                    await processing_msg.edit_text(safe_stats)
                except Exception as e:
                    logger.error(f"Failed to send formatted message: {e}")
                    # Fallback to simple text
                    simple_msg = f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ {nickname}\n\n–ò–≥—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server_id}"
                    await processing_msg.edit_text(simple_msg)
                
            except Exception as e:
                logger.error(f"Error in Telegram stats command: {e}")
                await processing_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
