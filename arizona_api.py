"""
API client for fetching player statistics and server status from Arizona RP (Deps API)
"""

import asyncio
import aiohttp
from typing import Dict, Any, Tuple, Optional
import logging
import re
from datetime import datetime

from unified_config import API_URL, API_KEY, REQUEST_TIMEOUT

logger = logging.getLogger(__name__)


class ArizonaRPAPIClient:
    """Client for fetching Arizona RP player information and server status"""

    def __init__(self):
        self.api_url = API_URL
        self.api_key = API_KEY
        self.timeout = REQUEST_TIMEOUT

        # –ö—ç—à –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
        self._servers_cache: Dict[int, Dict[str, Any]] = {}
        self._cache_timestamp: Optional[datetime] = None
        self._cache_duration = 300  # 5 –º–∏–Ω—É—Ç

    # =============== –ü—Ä–æ–≤–µ—Ä–∫–∏ ===============
    def validate_nickname(self, nickname: str) -> Tuple[bool, Optional[str]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∫–∞"""
        if not nickname:
            return False, "–ù–∏–∫ –∏–≥—Ä–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."
        if len(nickname) < 3:
            return False, "–ù–∏–∫ –∏–≥—Ä–æ–∫–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞."
        if len(nickname) > 24:
            return False, "–ù–∏–∫ –∏–≥—Ä–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª–µ–µ 24 —Å–∏–º–≤–æ–ª–æ–≤."
        if not re.match(r'^[a-zA-Z0-9_]+$', nickname):
            return False, "–ù–∏–∫ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è."
        return True, None

    def validate_server_id(self, server_id: int) -> Tuple[bool, Optional[str]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ ID —Å–µ—Ä–≤–µ—Ä–∞"""
        valid_servers = list(range(1, 33)) + [200] + list(range(101, 104))
        if server_id not in valid_servers:
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–µ—Ä–≤–µ—Ä–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: –ü–ö 1‚Äì32, ViceCity (200), –ú–æ–±–∞–π–ª 101‚Äì103"
        return True, None

    # =============== API –∏–≥—Ä–æ–∫–∞ ===============
    async def fetch_player_stats(
        self, nickname: str, server_id: int
    ) -> Tuple[Optional[Dict[str, Any]], Optional[str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞"""
        if not self.api_key:
            return None, "‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."

        headers = {"X-API-Key": self.api_key, "User-Agent": "MensemBot/1.0"}
        params = {"nickname": nickname, "serverId": server_id}

        try:
            timeout = aiohttp.ClientTimeout(total=self.timeout)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.get(self.api_url, headers=headers, params=params) as response:
                    logger.info(f"API request for {nickname} on server {server_id}: {response.status}")

                    if response.status == 401:
                        return None, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á."
                    if response.status == 429:
                        return None, "‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    if response.status != 200:
                        return None, f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ API: {response.status}"

                    try:
                        data = await response.json()
                    except Exception as e:
                        logger.error(f"Failed to parse JSON response: {e}")
                        return None, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API."

                    if "error_code" in data:
                        return None, f"‚ùå –û—à–∏–±–∫–∞ API ({data.get('error_code')}): {data.get('error_message','–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                    if "error" in data:
                        return None, f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('error',{}).get('message','–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                    if "status" in data and data["status"] == "error":
                        return None, f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('error',{}).get('message','–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                    if not self._validate_response(data):
                        return None, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API."

                    return data, None

        except asyncio.TimeoutError:
            return None, "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API."
        except aiohttp.ClientError:
            return None, "üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."
        except Exception as e:
            return None, f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"

    def _validate_response(self, data: Dict[str, Any]) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞"""
        if not isinstance(data, dict):
            return False
        if "id" in data and "level" in data:
            return True
        if any(key in data for key in ["statistics", "account_id", "nickname"]):
            return True
        return False

    # =============== –°–µ—Ä–≤–µ—Ä—ã ===============
    def get_server_name(self, server_id: int) -> str:
        """–ù–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        server_names = {
            1: "Phoenix", 2: "Tucson", 3: "Scottdale", 4: "Chandler", 5: "Brainburg",
            6: "Saint Rose", 7: "Mesa", 8: "Red-Rock", 9: "Yuma", 10: "Surprise",
            11: "Prescott", 12: "Glendale", 13: "Kingman", 14: "Winslow", 15: "Payson",
            16: "Gilbert", 17: "Show Low", 18: "Casa-Grande", 19: "Page", 20: "Sun-City",
            21: "Queen-Creek", 22: "Sedona", 23: "Holiday", 24: "Wednesday", 25: "Yava",
            26: "Faraway", 27: "Bumble Bee", 28: "Christmas", 29: "Mirage", 30: "Love",
            31: "Drake", 32: "Space", 200: "ViceCity",
            101: "Mobile I", 102: "Mobile II", 103: "Mobile III"
        }
        return server_names.get(server_id, f"Server {server_id}")

    async def fetch_server_status(self, server_id: int) -> Dict[str, Any]:
        """–§–µ–π–∫–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä (–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–µ—Ä–æ–≤)"""
        return {"server_id": server_id, "online": 500, "max_online": 1000, "is_online": True}

    async def fetch_all_servers_status(self) -> Dict[int, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        if self._is_cache_valid() and self._servers_cache:
            return self._servers_cache.copy()

        servers_info: Dict[int, Dict[str, Any]] = {}
        server_ids = list(range(1, 33)) + [200] + list(range(101, 104))

        try:
            batch_size = 5
            for i in range(0, len(server_ids), batch_size):
                batch = server_ids[i:i + batch_size]
                tasks = [self.fetch_server_status(sid) for sid in batch]
                results = await asyncio.gather(*tasks, return_exceptions=True)

                for sid, res in zip(batch, results):
                    if isinstance(res, Exception):
                        servers_info[sid] = {"server_id": sid, "online": 0, "max_online": 0, "is_online": False, "error": str(res)}
                    else:
                        servers_info[sid] = res

                if i + batch_size < len(server_ids):
                    await asyncio.sleep(1)

            self._servers_cache = servers_info.copy()
            self._cache_timestamp = datetime.now()

        except Exception as e:
            logger.error(f"Error fetching all servers status: {e}")

        return servers_info

    def _is_cache_valid(self) -> bool:
        if not self._cache_timestamp:
            return False
        return (datetime.now() - self._cache_timestamp).total_seconds() < self._cache_duration

    async def get_servers_info(self) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –æ–Ω–ª–∞–π–Ω–æ–º"""
        servers_data = await self.fetch_all_servers_status()

        def fmt(sid: int) -> str:
            s = servers_data.get(sid, {})
            name = self.get_server_name(sid)
            if not s or not s.get("is_online", False):
                return f"üî¥ [{sid:02}] {name} ‚Äî Offline"
            return f"üü¢ [{sid:02}] {name} ‚Äî {s['online']} / {s['max_online']}"

        msg = "üìä –û–Ω–ª–∞–π–Ω —Å–µ—Ä–≤–µ—Ä–æ–≤ Arizona RP\n\n"

        msg += "üíª –ü–ö —Å–µ—Ä–≤–µ—Ä—ã (1‚Äì32):\n"
        for sid in range(1, 33):
            msg += fmt(sid) + "\n"

        msg += "\nüåÜ ViceCity:\n"
        msg += fmt(200) + "\n"

        msg += "\nüì± –ú–æ–±–∞–π–ª —Å–µ—Ä–≤–µ—Ä—ã:\n"
        for sid in range(101, 104):
            msg += fmt(sid) + "\n"

        return msg


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
arizona_api = ArizonaRPAPIClient()