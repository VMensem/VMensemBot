#!/usr/bin/env python3
"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∫–∞–∂–¥—ã–µ 5 —á–∞—Å–æ–≤
"""

import asyncio
import logging
import signal
import sys
import time
from datetime import datetime, timedelta
from typing import Optional, Callable

logger = logging.getLogger(__name__)

class RestartScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    def __init__(self, restart_interval_hours: int = 5):
        self.restart_interval = restart_interval_hours * 3600  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã
        self.start_time = time.time()
        self.next_restart_time = self.start_time + self.restart_interval
        self.shutdown_callback: Optional[Callable] = None
        self.running = False
        
    def set_shutdown_callback(self, callback: Callable):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
        self.shutdown_callback = callback
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.running = True
        logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –°–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {self.restart_interval // 3600} —á–∞—Å–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        next_restart = datetime.fromtimestamp(self.next_restart_time)
        logger.info(f"–°–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫: {next_restart.strftime('%Y-%m-%d %H:%M:%S')}")
        
        while self.running:
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è
            if current_time >= self.next_restart_time:
                logger.info("‚è∞ –í—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞!")
                await self._initiate_restart()
                break
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –∫–∞–∂–¥—ã–π —á–∞—Å
            time_until_restart = self.next_restart_time - current_time
            if int(time_until_restart) % 3600 == 0 and time_until_restart > 0:
                hours_left = int(time_until_restart // 3600)
                logger.info(f"‚è±Ô∏è –î–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {hours_left} —á–∞—Å–æ–≤")
            
            # –°–ø–∏–º 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(60)
    
    async def _initiate_restart(self):
        """–ò–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
        
        if self.shutdown_callback:
            try:
                await self.shutdown_callback()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ shutdown_callback: {e}")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        logger.info("üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        sys.exit(0)
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.running = False
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def get_uptime(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã"""
        uptime_seconds = time.time() - self.start_time
        hours = int(uptime_seconds // 3600)
        minutes = int((uptime_seconds % 3600) // 60)
        return f"{hours}—á {minutes}–º"
    
    def get_time_until_restart(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
        time_left = self.next_restart_time - time.time()
        if time_left <= 0:
            return "–ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É"
        
        hours = int(time_left // 3600)
        minutes = int((time_left % 3600) // 60)
        return f"{hours}—á {minutes}–º"