#!/usr/bin/env python3
"""
Unified MensemBot - Multi-platform bot for Telegram and Discord
Supports community management and Arizona RP statistics
"""

import asyncio
import logging
import signal
import sys
from typing import Optional
import os

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.exceptions import TelegramAPIError

from unified_config import (
    BOT_TOKEN, CREATOR_ID, validate_config, logger,
    WELCOME_MESSAGE, HELP_MESSAGE_USER, HELP_MESSAGE_ADMIN, HELP_MESSAGE_CREATOR,RANK_MESSAGE, SHOP_HELP_MESSAGE,
    COMMAND_DESCRIPTIONS
)
from data_manager import DataManager
from filters import IsAdmin, IsCreator
from arizona_api import arizona_api
from discord_bot import discord_bot
from keep_alive import keep_alive

# –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤ environment (Render)
if not BOT_TOKEN:
    BOT_TOKEN = os.environ.get("BOT_TOKEN", "")
if not CREATOR_ID:
    CREATOR_ID = int(os.environ.get("CREATOR_ID", 0))

class UnifiedBot:
    """Main unified bot class supporting both Telegram and Discord"""
    
    def __init__(self):
        self.telegram_bot: Optional[Bot] = None
        self.dp: Optional[Dispatcher] = None
        self.data_manager: Optional[DataManager] = None
        self.running = False
        self.restart_count = 0
        self.max_restarts = 100
        
    async def setup_telegram(self):
        """Setup Telegram bot"""
        try:
            self.telegram_bot = Bot(token=BOT_TOKEN)
            self.dp = Dispatcher()
            self.data_manager = DataManager()
            
            # Setup filters
            self.dp.message.filter(lambda message: message.chat.type in ['private', 'group', 'supergroup'])
            
            # Setup handlers
            self.setup_telegram_handlers()
            
            logger.info("Telegram bot configured successfully")
            return True
            
        except Exception as e:
            logger.error(f"Failed to setup Telegram bot: {e}")
            return False
    
    def setup_telegram_handlers(self):
        """Setup Telegram bot handlers"""
        
        # Start command
        @self.dp.message(CommandStart())
        async def start_command(message: Message):
            await message.answer(WELCOME_MESSAGE, parse_mode="HTML")
        
        # Help command
        #–°–æ–∑–¥–∞—Ç–µ–ª—é
        @self.dp.message(Command("help"), IsCreator())
        async def help_command(message: Message):
            await message.answer(HELP_MESSAGE_CREATOR, parse_mode="HTML")

        #–ê–¥–º–∏–Ω—ã
        @self.dp.message(Command("help"), IsAdmin())
        async def help_command(message: Message):
            await message.answer(HELP_MESSAGE_ADMIN, parse_mode="HTML")

        #–ò–≥—Ä–æ–∫–∏
        @self.dp.message(Command("help"))
        async def help_command(message: Message):
            await message.answer(HELP_MESSAGE_USER, parse_mode="HTML")
        
        # Rules commands
        @self.dp.message(Command("rules"))
        async def rules_command(message: Message):
            rules = self.data_manager.get_rules()
            await message.answer(f"üìã <b>–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:</b>\n\n{rules}", parse_mode="HTML")
        
        @self.dp.message(Command("setrules"), IsAdmin())
        async def set_rules_command(message: Message):
            if not message.text or len(message.text.split(" ", 1)) < 2:
                await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setrules <–Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞>")
                return
            
            new_rules = message.text.split(" ", 1)[1]
            self.data_manager.set_rules(new_rules)
            await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        
        # Info commands
        @self.dp.message(Command("info"))
        async def info_command(message: Message):
            info = self.data_manager.get_info()
            await message.answer(f"‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n\n{info}", parse_mode="HTML")
        
        @self.dp.message(Command("setinfo"), IsAdmin())
        async def set_info_command(message: Message):
            if not message.text or len(message.text.split(" ", 1)) < 2:
                await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setinfo <–Ω–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è>")
                return
            
            new_info = message.text.split(" ", 1)[1]
            self.data_manager.set_info(new_info)
            await message.answer("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

        # Rank commands
        @self.dp.message(Command("rank"))
        async def rank_command(message: Message):
            rank_info = self.data_manager.get_rank()
            if rank_info:
                await message.answer(f"üèÜ <b>–†–∞–Ω–≥–∏:</b>\n\n{rank_info}", parse_mode="HTML")
            else:
                await message.answer(RANK_MESSAGE, parse_mode="HTML")
        
        @self.dp.message(Command("setrank"), IsAdmin())
        async def set_rank_command(message: Message):
            if not message.text or len(message.text.split(" ", 1)) < 2:
                await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setrank <–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–Ω–≥–∞—Ö>")
                return
            
            new_rank = message.text.split(" ", 1)[1]
            self.data_manager.set_rank(new_rank)
            await message.answer("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–Ω–≥–∞—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

        # ID command
        @self.dp.message(Command("id"))
        async def id_command(message: Message):
            user_id = message.from_user.id
            chat_id = message.chat.id
            
            response = f"üÜî <b>–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n\n"
            response += f"üë§ User ID: <code>{user_id}</code>\n"
            response += f"üí¨ Chat ID: <code>{chat_id}</code>\n"
            
            if message.chat.type != 'private':
                response += f"üì± Chat Type: {message.chat.type}"
            
            await message.answer(response, parse_mode="HTML")

        # Shop command
        @self.dp.message(Command("shop"))
        async def shop_command(message: Message):
            if message.chat.type != 'private':
                await message.answer("üîí –ö–æ–º–∞–Ω–¥–∞ /shop —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.")
                return
            
            await message.answer(SHOP_HELP_MESSAGE, parse_mode="HTML")
        
        # Idea command
        @self.dp.message(Command("idea"))
        async def idea_command(message: Message):
            args = message.text.split(maxsplit=1) if message.text else []
            
            if len(args) < 2:
                await message.answer(
                    "üí° <b>–ö–æ–º–∞–Ω–¥–∞ /idea</b>\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –∏–¥–µ—é —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É —Å–µ–º—å–∏!\n\n"
                    "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> /idea –í–∞—à–∞ –∏–¥–µ—è",
                    parse_mode="HTML"
                )
                return
            
            idea_text = args[1].strip()
            if len(idea_text) < 10:
                await message.answer("‚ùå –ò–¥–µ—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –û–ø–∏—à–∏—Ç–µ –µ—ë –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤).")
                return
            
            user = message.from_user
            user_info = f"@{user.username}" if user.username else user.first_name
            idea_message = f"üí° <b>–ù–û–í–ê–Ø –ò–î–ï–Ø –û–¢ –ò–ì–†–û–ö–ê</b>\n\nüë§ {user_info} (ID: {user.id})\nüìù {idea_text}\n‚è∞ {message.date.strftime('%d.%m.%Y %H:%M')}"
            
            family_chat_id = self.data_manager.get_family_chat_id()
            if family_chat_id:
                await self.telegram_bot.send_message(family_chat_id, idea_message, parse_mode="HTML")
            await self.telegram_bot.send_message(CREATOR_ID, "üí° –ù–æ–≤–∞—è –∏–¥–µ—è –≤ —á–∞—Ç–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞!")
            await message.answer("‚úÖ –í–∞—à–∞ –∏–¥–µ—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É —Å–µ–º—å–∏!", parse_mode="HTML")

        # Stats and servers commands
        @self.dp.message(Command("stats"))
        async def stats_command(message: Message):
            args = message.text.split() if message.text else []
            if len(args) != 3:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /stats <–Ω–∏–∫> <ID —Å–µ—Ä–≤–µ—Ä–∞>")
                return
            
            nickname = args[1]
            try:
                server_id = int(args[2])
            except ValueError:
                await message.answer("‚ùå ID —Å–µ—Ä–≤–µ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
                return
            
            # Validate nickname and server
            is_valid_nick, nick_error = arizona_api.validate_nickname(nickname)
            if not is_valid_nick:
                await message.answer(f"‚ùå {nick_error}")
                return
            is_valid_server, server_error = arizona_api.validate_server_id(server_id)
            if not is_valid_server:
                await message.answer(f"‚ùå {server_error}")
                return
            
            processing_msg = await message.answer("‚åõ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
            try:
                data, error = await arizona_api.fetch_player_stats(nickname, server_id)
                if error:
                    await processing_msg.edit_text(error)
                    return
                formatted_stats = arizona_api.format_stats(data, nickname, server_id) if data else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
                if len(formatted_stats) > 4096:
                    formatted_stats = formatted_stats[:4093] + "..."
                await processing_msg.edit_text(formatted_stats)
            except Exception as e:
                logger.error(f"Error in stats command: {e}")
                await processing_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        
        @self.dp.message(Command("servers"))
        async def servers_command(message: Message):
            loading_msg = await message.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤...")
            try:
                servers_info = await arizona_api.get_servers_status_from_api()
                keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_servers")]])
                await loading_msg.edit_text(servers_info, reply_markup=keyboard)
            except Exception as e:
                logger.error(f"Error fetching servers: {e}")
                fallback_info = arizona_api.get_servers_info()
                keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_servers")]])
                await loading_msg.edit_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤.\n{fallback_info}", reply_markup=keyboard)

    async def set_bot_commands(self):
        commands = [BotCommand(command=c, description=d) for c,d in COMMAND_DESCRIPTIONS.items()]
        try:
            await self.telegram_bot.set_my_commands(commands)
            logger.info("Bot commands set successfully")
        except Exception as e:
            logger.error(f"Failed to set bot commands: {e}")

    async def start_telegram(self):
        try:
            logger.info("Starting Telegram bot...")
            await self.set_bot_commands()
            await self.dp.start_polling(self.telegram_bot, skip_updates=True)
        except Exception as e:
            logger.error(f"Telegram bot error: {e}")
            raise

    async def start_discord(self):
        if discord_bot.setup():
            try:
                await discord_bot.start()
            except Exception as e:
                logger.error(f"Discord bot failed to start: {e}")
        else:
            logger.info("Discord bot not configured, running Telegram only")

    async def run(self):
        if not validate_config():
            logger.error("Configuration validation failed")
            return False
        self.restart_count += 1
        self.running = True
        telegram_task = asyncio.create_task(self.start_telegram(), name="telegram_bot")
        discord_task = asyncio.create_task(self.start_discord(), name="discord_bot")
        keep_alive()
        await asyncio.gather(telegram_task, discord_task, return_exceptions=True)

if __name__ == "__main__":
    asyncio.run(UnifiedBot().run())
